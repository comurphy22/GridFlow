#!/usr/bin/env python3
"""
Call Anthropic Claude with a prompt file and save the response.

Usage examples:
  # Use the prompt generated by optimize_llm.py and save markdown response
  python3 call_claude.py --prompt-file plots/llm_prompt.txt --out plots/claude_response.md

  # Choose a different model and token limit
  python3 call_claude.py --prompt-file plots/llm_prompt.txt --model claude-3-5-sonnet-latest --max-tokens 2000

Requirements:
  - pip install anthropic
  - export ANTHROPIC_API_KEY=... (your key)
"""

import argparse
import os
import sys
import time
from typing import Optional


def _import_anthropic():
    try:
        import anthropic  # type: ignore
        return anthropic
    except Exception as e:
        print("Error: The 'anthropic' package is not installed.\n"
              "Install it with: pip install anthropic\n"
              f"Details: {e}", file=sys.stderr)
        sys.exit(2)


def read_text_file(path: str) -> str:
    with open(path, "r", encoding="utf-8") as f:
        return f.read()


def write_text_file(path: str, content: str):
    os.makedirs(os.path.dirname(path) or ".", exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)


def call_claude(prompt: str, *, api_key: str, model: str, max_tokens: int, system: Optional[str], temperature: float, top_p: float, retries: int = 3, retry_backoff: float = 1.5) -> str:
    anthropic = _import_anthropic()
    client = anthropic.Anthropic(api_key=api_key)

    last_err: Optional[Exception] = None
    delay = 1.0

    for attempt in range(1, retries + 1):
        try:
            resp = client.messages.create(
                model=model,
                max_tokens=max_tokens,
                temperature=temperature,
                top_p=top_p,
                system=system,
                messages=[{"role": "user", "content": prompt}],
            )
            # Extract text from content blocks
            parts = []
            for block in getattr(resp, "content", []) or []:
                # Newer SDK returns objects with type/text; older may return dicts
                if hasattr(block, "type") and getattr(block, "type", None) == "text":
                    parts.append(getattr(block, "text", ""))
                elif isinstance(block, dict) and block.get("type") == "text":
                    parts.append(block.get("text", ""))
            return "".join(parts).strip()
        except Exception as e:
            last_err = e
            if attempt >= retries:
                break
            time.sleep(delay)
            delay *= retry_backoff

    assert last_err is not None
    raise last_err


def main():
    p = argparse.ArgumentParser(description="Call Anthropic Claude with a prompt file and save the response.")
    p.add_argument("--prompt-file", default="plots/llm_prompt.txt", help="Path to the input prompt file (default: plots/llm_prompt.txt)")
    p.add_argument("--out", default="plots/claude_response.md", help="Path to save the Claude response (default: plots/claude_response.md)")
    p.add_argument("--model", default="claude-3-5-sonnet-latest", help="Claude model name (default: claude-3-5-sonnet-latest)")
    p.add_argument("--max-tokens", type=int, default=1500, help="Max tokens for the response")
    p.add_argument("--temperature", type=float, default=0.2, help="Sampling temperature (default: 0.2)")
    p.add_argument("--top-p", type=float, default=0.95, help="Top-p nucleus sampling (default: 0.95)")
    p.add_argument("--system", default="You are a precise, pragmatic optimization advisor. Be concise and actionable.", help="Optional system prompt")
    p.add_argument("--retries", type=int, default=3, help="Number of retries on transient errors")
    args = p.parse_args()

    api_key = os.environ.get("ANTHROPIC_API_KEY")
    if not api_key:
        print("Error: ANTHROPIC_API_KEY environment variable is not set.", file=sys.stderr)
        print("Export your key, e.g.: export ANTHROPIC_API_KEY=sk-ant-...", file=sys.stderr)
        sys.exit(2)

    if not os.path.exists(args.prompt_file):
        print(f"Error: Prompt file not found: {args.prompt_file}", file=sys.stderr)
        sys.exit(2)

    prompt = read_text_file(args.prompt_file)

    try:
        text = call_claude(
            prompt,
            api_key=api_key,
            model=args.model,
            max_tokens=args.max_tokens,
            system=args.system or None,
            temperature=args.temperature,
            top_p=args.top_p,
            retries=args.retries,
        )
    except Exception as e:
        print(f"Claude API call failed: {e}", file=sys.stderr)
        sys.exit(1)

    write_text_file(args.out, text)
    print(f"Claude response written to {args.out}")


if __name__ == "__main__":
    main()
